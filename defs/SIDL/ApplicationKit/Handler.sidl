<bindings name="Haiku::Handler">
	<doc>Exposes the Handler object</doc>
	<binding source="BHandler" source-inherits="BArchivable" target="Haiku::Handler" target-inherits="Haiku::Archivable">
		<doc>Exposes the Handler object</doc>
		<functions>
			<constructor>
				<doc>Creates a Handler.</doc>
				<param name="name" type="const char*" action="input" default="NULL">
					<doc>Sets the [code]what[/what] property.</doc>
				</param>
			</constructor>
			<constructor overload-name="Empty">
				<doc>Creates an empty Handler.</doc>
			</constructor>
			<destructor />
<!-- Archiving -->
			<constructor overload-name="FromArchive">
				<doc>Creates an Handler from an archive.</doc>
				<param name="archive" type="BMessage*" action="input">
					<doc>Contains an archived version of the Handler.</doc>
				</param>
			</constructor>
			<method name="Instantiate">
				<doc>Instantiate [b]must[/b] return a [name]Haiku::Archivable[/name]</doc>
				<param name="data" type="BMessage*" action="input" />
				<return type="BArchivable*" action="output" />
			</method>
			<method name="Archive">
				<param name="data" type="BMessage*" action="output" />
				<param name="deep" type="bool" default="true" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- guts -->
<!--
			<event name="MessageReceived">
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<return type="void" />
			</event>
-->
			<method name="Looper">
				<return type="BLooper*" />
			</method>
<!--
			<event name="SetName">
				<param name="name" type="const char*" action="input" />
			</event>
			<event name="Name">
				<return type="const char*" action="output" />
			</event>
			<event name="SetNextHandler">
				<param name="handler" type="BHandler*" action="input" />
			</event>
			<event name="NextHandler">
				<return type="BHandler*" action="output" />
			</event>
-->
<!-- Message filtering -->
<!-- TODO: BMessageFilter object not yet implemented
			<method name="AddFilter">
				<param name="filter" type="BMessageFilter*" action="input" />
			</method>
			<method name="RemoveFilter">
				<param name="filter" type="BMessageFilter*" action="input" />
				<return type="bool" />
			</method>
-->
<!-- TODO: BList object not yet implemented
			<method name="SetFilterList">
				<param name="filters" type="BList*" action="input" />
			</method>
			<method name="FilterList">
				<return type="BList*" action="output" />
			</method>
-->
			<method name="LockLooper">
				<return type="bool" />
			</method>
			<method name="LockLooperWithTimeout">
				<param name="timeout" type="bigtime_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="UnlockLooper" />
<!-- Scripting -->
			<method name="ResolveSpecifier">
				<param name="message" type="BMessage*" action="input" />
				<param name="index" type="int32" action="input" />
				<param name="specifier" type="BMessage*" action="input" />
				<param name="form" type="int32" action="input" />
				<param name="property" type="const char*" action="input" />
				<return type="BHandler*" action="output" />
			</method>
			<method name="GetSupportedSuites">
				<param name="data" type="BMessage*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- Observer calls, inter-looper and inter-team -->
			<method name="StartWatching">
				<param name="target" type="BMessenger" action="input" />
				<param name="what" type="uint32" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StartWatchingAll">
				<param name="target" type="BMessenger" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StopWatching">
				<param name="target" type="BMessenger" action="input" />
				<param name="what" type="uint32" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StopWatchingAll">
				<param name="target" type="BMessenger" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StartWatching" overload-name="StartWatchingHandler">
				<param name="observer" type="BHandler*" action="input" />
				<param name="what" type="uint32" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StartWatchingAll" overload-name="StartWatchingHandlerAll">
				<param name="observer" type="BHandler*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StopWatching" overload-name="StopWatchingHandler">
				<param name="observer" type="BHandler*" action="input" />
				<param name="what" type="uint32" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StopWatchingAll" overload-name="StopWatchingHandlerAll">
				<param name="observer" type="BHandler*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- Notifier calls -->
			<method name="SendNotices">
				<param name="what" type="uint32" action="input" />
				<param name="notice" type="BMessage*" default="NULL" action="input" />
			</method>
			<method name="IsWatched">
				<return type="bool" />
			</method>
		</functions>
		<constants>
			<constant name="B_OBSERVE_WHAT_CHANGE" type="int" group="" />
			<constant name="B_OBSERVE_ORIGINAL_WHAT" type="int" group="" />
			<constant name="B_OBSERVER_OBSERVE_ALL" type="uint32" group="" />
		</constants>
	</binding>
</bindings>
