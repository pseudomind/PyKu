<bindings name="Haiku::Clipboard">
	<doc>Exposes the Clipboard object</doc>
	<binding source="BClipboard" target="Haiku::Clipboard">
		<doc>Exposes the Clipboard object</doc>
		<functions>
			<constructor>
				<doc>Creates a Clipboard object attached to a named clipboard.</doc>
				<param name="name" type="const char*" action="input">
					<doc>The name of the clipboard; a new clipboard is created if one with that name does not exist.</doc>
				</param>
				<param name="discard" type="bool" action="input" default="false">
					<doc>Currently unused.</doc>
				</param>
			</constructor>
			<destructor>
				<doc>Destroys the Clipboard object, but not the underlying clipboard.</doc>
			</destructor>
			<method name="Name">
				<doc>Returns the name of the clipboard.</doc>
				<return type="const char*" />
			</method>
			<method name="LocalCount">
				<doc>Fetches a cached count of clipboards.</doc>
				<return type="uint32" action="output" />
			</method>
			<method name="SystemCount">
				<doc>Fetches a count of clipboards from the system.</doc>
				<return type="uint32" action="output" />
			</method>
			<method name="StartWatching">
				<doc>Begins watching for changes in the clipboard.</doc>
				<param name="target" type="BMessenger" action="input">
					<doc>The target; a [code]B_CLIPBOARD_CHANGED[/code] message will be sent to the target when the clipboard changes.</doc>
				</param>
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="StopWatching">
				<doc>Begins watching for changes in the clipboard.</doc>
				<param name="target" type="BMessenger" action="input">
					<doc>The target; a [code]B_CLIPBOARD_CHANGED[/code] message will be sent to the target when the clipboard changes.</doc>
				</param>
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="Lock">
				<doc>Locks the Clipboard object; it must be locked before reading or writing data. Blocks if the Clipboard is already locked; returns true if the lock was successful; returns flase if the Clipboard was deleted while waiting for a lock.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="Unlock">
				<doc>Unlocks the Clipboard object.</doc>
			</method>
			<method name="IsLocked">
				<doc>Returns true if the clipboard is locked.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="Clear">
				<doc>Clears the Clipboard object's data.</doc>
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="Commit">
				<doc>Writes the Clipboard object's data to the underlying clipboard.</doc>
				<param name="failIfChanged" type="bool" default="false" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="Revert">
				<doc>Reloads data from the underlying clipboard, losing any data in the Clipboard object.</doc>
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="DataSource">
				<doc>Returns a BMessenger that targets the Application that last wrote to the Clipboard.</doc>
				<return type="BMessenger" action="output" />
			</method>
			<method name="Data">
				<doc>Returns the Message object that holds the clipboard data, or NULL if the CLipboard object is not locked.</doc>
				<return type="BMessage*" action="output" />
			</method>
		</functions>
		<constants>
			<constant name="B_CLIPBOARD_CHANGED" type="int" group="" />
		</constants>
		<globals>
			<global name="be_clipboard" type="BClipboard*" />
		</globals>
	</binding>
</bindings>
