<bindings name="Haiku::Invoker">
	<doc>Exposes the Invoker object</doc>
	<binding source="BInvoker" target="Haiku::Invoker">
		<doc>Exposes the Invoker object</doc>
		<functions>
			<constructor>
				<doc>Creates an Invoker.</doc>
				<param name="message" type="BMessage*" action="input" />
				<param name="handler" type="BHandler*" action="input" />
				<param name="looper" type="BLooper*" action="input" default="NULL" />
			</constructor>
			<constructor overload-name="WithMessenger">
				<doc>Creates an Invoker.</doc>
				<param name="message" type="BMessage*" action="input" />
				<param name="messenger" type="BMessenger" action="input" />
			</constructor>
			<constructor overload-name="Empty">
				<doc>Creates an empty Invoker.</doc>
			</constructor>
			<destructor />
			<method name="SetMessage">
				<param name="message" type="BMessage*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="Message">
				<return type="BMessage*" action="output" must-not-delete="true" />
			</method>
			<method name="Command">
				<return type="uint32" action="output" />
			</method>
			<method name="SetTarget">
				<param name="handler" type="BHandler*" action="input" />
				<param name="looper" type="BLooper*" action="input" default="NULL" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetTarget" overload-name="SetTargetMessenger">
				<param name="messenger" type="BMessenger" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="IsTargetLocal">
				<return type="bool" action="output" />
			</method>
			<method name="Target">
				<param name="looper" type="BLooper*" pass-as-pointer="true" default="NULL" action="output" />
				<return type="BHandler*" action="output" />
			</method>
			<method name="Messenger">
				<return type="BMessenger" action="output" />
			</method>
			<method name="SetHandlerForReply">
				<param name="handler" type="BHandler*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="HandlerForReply">
				<return type="BHandler*" action="output" />
			</method>
			<method name="Invoke">
				<param name="message" type="BMessage*" default="NULL" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="InvokeNotify">
				<param name="message" type="BMessage*" action="input" />
				<param name="kind" type="uint32" default="B_CONTROL_INVOKED" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetTimeout">
				<param name="timeout" type="bigtime_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="Timeout">
				<return type="bigtime_t" action="output" />
			</method>
		</functions>
	</binding>
</bindings>
