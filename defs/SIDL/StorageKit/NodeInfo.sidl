<bindings name="Haiku::NodeInfo">
	<doc>Exposes the NodeInfo object</doc>
	<binding source="BNodeInfo" target="Haiku::NodeInfo">
		<doc>Exposes the NodeInfo object</doc>
		<functions>
			<constructor>
				<param name="node" type="BNode*" action="input" />
			</constructor>
			<constructor overload-name="Empty" />
			<destructor />
			<method name="SetTo">
				<param name="node" type="BNode*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="InitCheck">
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetType">
				<param name="type" type="char*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetType">
				<param name="type" type="const char*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- TODO: Resolve issues with Bitmap
			<method name="GetIcon">
				<param name="icon" type="BBitmap*" action="output" />
				<param name="size" type="icon_size" action="input" default="B_LARGE_ICON" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetIcon">
				<param name="icon" type="BBitmap*" action="input" />
				<param name="size" type="icon_size" action="input" default="B_LARGE_ICON" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
-->			<method name="GetIcon" overload-name="GetIconData">
				<param name="data" type="uint8*" pass-as-pointer="true" action="output" string-length="size" />
				<param name="size" type="size_t" pass-as-pointer="true" action="length[data]" />
				<param name="type" type="type_code" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetIcon" overload-name="SetIconFromData">
				<param name="data" type="const uint8*" action="input" string-length="size" />
				<param name="size" type="size_t" action="length[data]" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetPreferredApp">
				<param name="signature" type="char*" action="output" />
				<param name="verb" type="app_verb" action="input" default="B_OPEN" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetPreferredApp">
				<param name="signature" type="char*" action="input" />
				<param name="verb" type="app_verb" action="input" default="B_OPEN" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetAppHint">
				<param name="ref" type="entry_ref*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetAppHint">
				<param name="ref" type="entry_ref*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- TODO: Resolve issues with Bitmap
			<method name="GetTrackerIcon">
				<param name="icon" type="BBitmap*" action="output" />
				<param name="size" type="icon_size" action="input" default="B_LARGE_ICON" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<static name="GetTrackerIcon" overload-name="GetTrackerIconForEntryRef">
				<param name="ref" type="entry_ref*" action="input" />
				<param name="icon" type="BBitmap*" action="input" />
				<param name="size" type="icon_size" action="input" default="B_LARGE_ICON" />
				<return type="status_t" action="error" success="B_OK" />
			</static>
-->
		</functions>
	</binding>
</bindings>
