<bindings name="Haiku::Statable">
	<doc>Exposes the Statable object</doc>
	<binding source="BStatable" target="Haiku::Statable">
		<doc>Exposes the Statable object</doc>
		<functions>
<!--
This is an abstract base class; we use it for inherited methods,
so we do not need a constructor or destructor
-->
<!--
			<constructor />
			<destructor />
-->
<!-- TODO: These are abstract functions; re-enable after changing the way classes are handled
			<method name="GetStat">
				<param name="stat" type="struct stat*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
-->
			<method name="IsFile">
				<return type="bool" action="output" />
			</method>
			<method name="IsDirectory">
				<return type="bool" action="output" />
			</method>
			<method name="IsSymLink">
				<return type="bool" action="output" />
			</method>
			<method name="GetNodeRef">
				<param name="ref" type="node_ref*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetOwner">
				<param name="owner" type="uid_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetOwner">
				<param name="owner" type="uid_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetGroup">
				<param name="group" type="gid_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetGroup">
				<param name="group" type="gid_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetPermissions">
				<param name="perms" type="mode_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetPermissions">
				<param name="perms" type="mode_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetSize">
				<param name="size" type="off_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetModificationTime">
				<param name="mtime" type="time_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetModificationTime">
				<param name="mtime" type="time_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetCreationTime">
				<param name="ctime" type="time_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetCreationTime">
				<param name="ctime" type="time_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetAccessTime">
				<param name="atime" type="time_t" pass-as-pointer="true" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetAccessTime">
				<param name="atime" type="time_t" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="GetVolume">
				<param name="vol" type="BVolume*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
		</functions>
	</binding>
</bindings>
