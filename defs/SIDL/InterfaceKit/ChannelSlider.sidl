<bindings name="Haiku::ChannelSlider">
	<doc>Exposes the ChannelSlider object</doc>
	<binding source="BChannelSlider" source-inherits="BChannelControl" target="Haiku::ChannelSlider" target-inherits="Haiku::ChannelControl">
		<doc>Exposes the ChannelSlider object</doc>
		<functions>
			<constructor>
				<doc>...</doc>
				<param name="area" type="BRect" action="input" />
				<param name="name" type="const char*" action="input" />
				<param name="label" type="const char*" action="input" />
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<param name="channels" type="int32" action="input" default="1" />
				<param name="resizingMode" type="uint32" action="input" default="B_FOLLOW_LEFT | B_FOLLOW_TOP" />
				<param name="flags" type="uint32" action="input" default="B_WILL_DRAW" />
			</constructor>
			<constructor overload-name="WithOrientation">
				<doc>...</doc>
				<param name="area" type="BRect" action="input" />
				<param name="name" type="const char*" action="input" />
				<param name="label" type="const char*" action="input" />
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<param name="posture" type="orientation" action="input" />
				<param name="channels" type="int32" action="input" default="1" />
				<param name="resizingMode" type="uint32" action="input" default="B_FOLLOW_LEFT | B_FOLLOW_TOP" />
				<param name="flags" type="uint32" action="input" default="B_WILL_DRAW" />
			</constructor>
			<constructor overload-name="WithoutFrame">
				<doc>...</doc>
				<param name="name" type="const char*" action="input" />
				<param name="label" type="const char*" action="input" />
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<param name="posture" type="orientation" action="input" />
				<param name="channels" type="int32" action="input" default="1" />
				<param name="flags" type="uint32" action="input" default="B_WILL_DRAW" />
			</constructor>
			<constructor overload-name="FromArchive">
				<doc>...</doc>
				<param name="archive" type="BMessage*" action="input" />
			</constructor>
			<destructor />
			<method name="Instantiate">
				<doc>Instantiate [b]must[/b] return a [name]Haiku::Archivable[/name]</doc>
				<param name="data" type="BMessage*" action="input" />
				<return type="BArchivable*" action="output" />
			</method>
			<method name="Archive">
				<param name="data" type="BMessage*" action="output" />
				<param name="deep" type="bool" default="true" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- Events not yet implemented for this object
			<event name="AttachedToWindow" />
			<event name="AllAttached" />
			<event name="DetachedFromWindow" />
			<event name="AllDetached" />
			<event name="MessageReceived">
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<return type="void" />
			</event>
			<event name="Draw">
				<doc>Draws the ChannelSlider label.</doc>
				<param name="updateRect" type="BRect" action="input" />
				<return type="void" />
			</event>
			<event name="MouseDown">
				<param name="point" type="BPoint" action="input" />
				<return type="void" />
			</event>
			<event name="MouseUp">
				<param name="point" type="BPoint" action="input" />
				<return type="void" />
			</event>
			<event name="MouseMoved">
				<param name="point" type="BPoint" action="input" />
				<param name="transit" type="uint32" action="input" />
				<param name="message" type="BMessage*" action="input" />
				<return type="void" />
			</event>
			<event name="WindowActivated">
				<param name="state" type="bool" action="input" />
				<return type="void" />
			</event>
			<event name="KeyDown">
				<param name="bytes" type="const char*" action="input" string-length="numBytes" />
				<param name="numBytes" type="int32" action="length[bytes]" />
				<return type="void" />
			</event>
			<event name="KeyUp">
				<param name="bytes" type="const char*" action="input" string-length="numBytes" />
				<param name="numBytes" type="int32" action="length[bytes]" />
				<return type="void" />
			</event>
			<event name="FrameResized">
				<param name="newWidth"  type="float" action="input" />
				<param name="newHeight" type="float" action="input" />
				<return type="void" />
			</event>
-->
			<method name="SetFont">
				<param name="font" type="const BFont*" action="input" />
				<param name="properties" type="uint32" action="input" default="B_FONT_ALL" />
				<return type="void" />
			</method>
			<method name="MakeFocus">
				<param name="focused" type="bool" default="true" action="input" />
			</method>
			<method name="GetPreferredSize">
				<param name="width" type="float" pass-as-pointer="true" action="output" />
				<param name="height" type="float" pass-as-pointer="true" action="output" />
				<return type="void" />
			</method>
			<method name="ResolveSpecifier">
				<param name="message" type="BMessage*" action="input" />
				<param name="index" type="int32" action="input" />
				<param name="specifier" type="BMessage*" action="input" />
				<param name="form" type="int32" action="input" />
				<param name="property" type="const char*" action="input" />
				<return type="BHandler*" action="output" />
			</method>
			<method name="GetSupportedSuites">
				<param name="data" type="BMessage*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetEnabled">
				<param name="on" type="bool" action="input" />
				<return type="void" />
			</method>
			<method name="SetOrientation">
				<param name="posture" type="orientation" action="input" />
				<return type="void" />
			</method>
			<method name="Orientation">
				<return type="orientation" action="output" />
			</method>
			<method name="MaxChannelCount">
				<return type="int32" action="output" />
			</method>
			<method name="SupportsIndividualLimits">
				<return type="bool" action="output" />
			</method>
<!-- Events not yet implemented for this object
			<event name="DrawChannel">
				<param name="into" type="BView*" action="input" />
				<param name="channel" type="int32" action="input" />
				<param name="area" type="BRect" action="input" />
				<param name="pressed" type="bool" action="input" />
			</event>
			<event name="DrawGroove">
				<param name="into" type="BView*" action="input" />
				<param name="channel" type="int32" action="input" />
				<param name="leftTop" type="BPoint" action="input" />
				<param name="pressed" type="bool" action="input" />
			</event>
			<event name="DrawThumb">
				<param name="into" type="BView*" action="input" />
				<param name="channel" type="int32" action="input" />
				<param name="where" type="BPoint" action="input" />
				<param name="pressed" type="bool" action="input" />
			</event>
-->
			<method name="ThumbFor">
				<param name="channel" type="int32" action="input" />
				<param name="pressed" type="bool" action="input" />
				<return type="const BBitmap*" action="output" />
			</method>
			<method name="ThumbFrameFor">
				<param name="channel" type="int32" action="input" />
				<return type="BRect" action="output" />
			</method>
			<method name="ThumbDeltaFor">
				<param name="channel" type="int32" action="input" />
				<return type="float" action="output" />
			</method>
			<method name="ThumbRangeFor">
				<param name="channel" type="int32" action="input" />
				<return type="float" action="output" />
			</method>
		</functions>
	</binding>
</bindings>
