<bindings name="Haiku::Menu">
	<doc>Exposes the Menu object</doc>
	<binding source="BMenu" source-inherits="BView" target="Haiku::Menu" target-inherits="Haiku::View">
		<doc>Exposes the Menu object</doc>
		<functions>
			<constructor>
				<doc>Creates a Menu; this constructor is suitable for use with [code]B_ITEMS_IN_COLUMN[/code] and [code]B_ITEMS_IN_ROW[/code].</doc>
				<param name="name" type="const char*" action="input" />
				<param name="layout" type="menu_layout" action="input" default="B_ITEMS_IN_COLUMN" />
			</constructor>
			<constructor overload-name="MatrixMenu">
				<doc>Creates a Menu; this constructor sets the layout to [code]B_ITEMS_IN_MATRIX[/code].</doc>
				<param name="name" type="const char*" action="input" />
				<param name="width" type="float" action="input" />
				<param name="height" type="float" action="input" />
			</constructor>
			<constructor overload-name="FromArchive">
				<param name="archive" type="BMessage*" action="input" />
			</constructor>
			<destructor />
			<method name="Instantiate">
				<doc>Instantiate [b]must[/b] return a [name]Haiku::Archivable[/name]</doc>
				<param name="data" type="BMessage*" action="input" />
				<return type="BArchivable*" action="output" />
			</method>
			<method name="Archive">
				<param name="data" type="BMessage*" action="output" />
				<param name="deep" type="bool" default="true" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- Events not yet implemented for this object
			<event name="AttachedToWindow" />
			<event name="DetachedFromWindow" />
			<event name="AllAttached" />
			<event name="AllDetached" />
			<event name="Draw">
				<doc>Draws the button label.</doc>
				<param name="updateRect" type="BRect" action="input" />
				<return type="void" />
			</event>
			<event name="MessageReceived">
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<return type="void" />
			</event>
			<event name="KeyDown">
				<param name="bytes" type="const char*" action="input" string-length="numBytes" />
				<param name="numBytes" type="int32" action="length[bytes]" />
				<return type="void" />
			</event>
-->
<!-- TODO: BSize object not yet implemented
			<method name="MinSize">
				<return type="BSize" action="output" />
			</method>
			<method name="MaxSize">
				<return type="BSize" action="output" />
			</method>
			<method name="PreferredSize">
				<return type="BSize" action="output" />
			</method>
-->
			<method name="GetPreferredSize">
				<param name="width" type="float" pass-as-pointer="true" action="output" />
				<param name="height" type="float" pass-as-pointer="true" action="output" />
				<return type="void" />
			</method>
			<method name="ResizeToPreferred" />
<!-- Events not yet implemented for this object
			<event name="FrameMoved">
				<param name="newPosition" type="BPoint" action="input" />
				<return type="void" />
			</event>
			<event name="FrameResized">
				<param name="newWidth"  type="float" action="input" />
				<param name="newHeight" type="float" action="input" />
				<return type="void" />
			</event>
-->
			<method name="MakeFocus">
				<param name="focused" type="bool" default="true" action="input" />
			</method>
			<method name="AddItem">
				<doc>Adds a MenuItem to the Menu.</doc>
				<param name="item" type="BMenuItem*" action="input" must-not-delete="true" />
				<return type="bool" action="output" />
			</method>
			<method name="AddItem" overload-name="AddItemAtIndex">
				<doc>Adds a MenuItem to the Menu at a specified index.</doc>
				<param name="item" type="BMenuItem*" action="input" must-not-delete="true" />
				<param name="index" type="int32" action="input" />
				<return type="bool" action="output" />
			</method>
			<method name="AddItem" overload-name="ToMatrix">
				<doc>Adds a MenuItem to the Menu with a specified frame; for use with Menus arranged in a matrix.</doc>
				<param name="item" type="BMenuItem*" action="input" must-not-delete="true" />
				<param name="frame" type="BRect" action="input" />
				<return type="bool" action="output" />
			</method>
			<method name="AddItem" overload-name="AddSubmenu">
				<doc>Adds a submenu to the Menu.</doc>
				<param name="item" type="BMenuItem*" action="input" must-not-delete="true" />
				<return type="bool" action="output" />
			</method>
			<method name="AddItem" overload-name="AddSubmenuAtIndex">
				<doc>Adds a submenu to the Menu at a specified index.</doc>
				<param name="item" type="BMenu*" action="input" must-not-delete="true" />
				<param name="index" type="int32" action="input" />
				<return type="bool" action="output" />
			</method>
			<method name="AddItem" overload-name="AddSubmenuToMatrix">
				<doc>Adds a submenu to the Menu with a specified frame; for use with Menus arranged in a matrix.</doc>
				<param name="item" type="BMenu*" action="input" must-not-delete="true" />
				<param name="frame" type="BRect" action="input" />
				<return type="bool" action="output" />
			</method>
<!-- TODO: BList object not yet implemented
			<method name="AddList">
				<param name="list" type="BList*" action="input" />
				<param name="index" type="int32" action="input" />
				<return type="bool" action="output" />
			</method>
-->
			<method name="AddSeparatorItem">
				<doc>Adds a separator to the Menu.</doc>
			</method>
			<method name="RemoveItem">
				<doc>Removes the given MenuItem.</doc>
				<param name="item" type="BMenuItem*" action="input" must-not-delete="false" />
				<return type="bool" action="output" />
			</method>
			<method name="RemoveItem" overload-name="RemoveSubmenu">
				<doc>Removes the given submenu.</doc>
				<param name="item" type="BMenu*" action="input" must-not-delete="false" />
				<return type="bool" action="output" />
			</method>
			<method name="RemoveItem" overload-name="RemoveItemAtIndex">
				<doc>Removes the MenuItem at the given index.</doc>
				<param name="index" type="int32" action="input" must-not-delete="false" />
				<return type="BMenuItem*" action="output" />
			</method>
			<method name="RemoveItems">
				<param name="index" type="int32" action="input" />
				<param name="count" type="int32" action="input" />
				<param name="deleteItems" type="bool" default="false" action="input" />
				<return type="bool" action="output" />
			</method>
			<method name="ItemAt">
				<doc>Finds the MenuItem at the given index.</doc>
				<param name="index" type="int32" action="input" />
				<return type="BMenuItem*" action="output" must-not-delete="true" />
			</method>
			<method name="SubmenuAt">
				<doc>Finds the submenu at the given index.</doc>
				<param name="index" type="int32" action="input" />
				<return type="BMenu*" action="output" must-not-delete="true" />
			</method>
			<method name="CountItems">
				<doc>Returns the number of MenuItems in the Menu.</doc>
				<return type="int32" action="output" />
			</method>
			<method name="IndexOf">
				<doc>Finds the index for the given MenuItem.</doc>
				<param name="item" type="BMenuItem*" action="input" />
				<return type="int32" action="output" />
			</method>
			<method name="IndexOf" overload-name="IndexOfSubmenu">
				<doc>Finds the index for the given submenu.</doc>
				<param name="item" type="BMenu*" action="input" />
				<return type="int32" action="output" />
			</method>
			<method name="FindItem">
				<doc>Finds a MenuItem by label.</doc>
				<param name="label" type="const char*" action="input" />
				<return type="BMenuItem*" action="output" must-not-delete="true" />
			</method>
			<method name="FindItem" overload-name="FindItemByCommand">
				<doc>Finds a MenuItem by command constant.</doc>
				<param name="command" type="uint32" action="input" />
				<return type="BMenuItem*" action="output" must-not-delete="true" />
			</method>
			<method name="SetTargetForItems">
				<doc>Sets the target for the MenuItems to the given Handler.</doc>
				<param name="handler" type="BHandler*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetTargetForItems" overload-name="SetMessengerTargetForItems">
				<doc>Sets the target for the MenuItems to the given Messenger.</doc>
				<param name="messenger" type="BMessenger" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetEnabled">
				<doc>Enables or disables the Menu.</doc>
				<param name="enabled" type="bool" action="input" />
			</method>
			<method name="SetRadioMode">
				<doc>Turns radio mode on or off for the Menu.</doc>
				<param name="flag" type="bool" action="input" />
			</method>
			<method name="SetTriggersEnabled">
				<doc>Enables or disables triggers for all items in the Menu.</doc>
				<param name="flag" type="bool" action="input" />
			</method>
			<method name="SetMaxContentWidth">
				<doc>Sets the maximum content width for the Menu.</doc>
				<param name="width" type="float" action="input" />
			</method>
			<method name="SetLabelFromMarked">
				<param name="state" type="bool" action="input" />
			</method>
			<method name="IsLabelFromMarked">
				<return type="bool" action="output" />
			</method>
			<method name="IsEnabled">
				<doc>Returns true if the Menu is enabled.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="IsRadioMode">
				<doc>Returns true if the Menu is in radio mode.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="AreTriggersEnabled">
				<doc>Returns true if the Menu has triggers enabled.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="IsRedrawAfterSticky">
				<doc>Returns true if the Menu has triggers enabled.</doc>
				<return type="bool" action="output" />
			</method>
			<method name="MaxContentWidth">
				<doc>Gets the maximum content width of the Menu.</doc>
				<return type="float" action="output" />
			</method>
			<method name="FindMarked">
				<doc>Finds the first marked MenuItem .</doc>
				<return type="BMenuItem*" action="output" />
			</method>
			<method name="Supermenu">
				<doc>Returns the Menu that contains this Menu.</doc>
				<return type="BMenu*" action="output" />
			</method>
			<method name="Superitem">
				<doc>Returns the MenuItem that contains this Menu.</doc>
				<return type="BMenuItem*" action="output" />
			</method>
			<method name="ResolveSpecifier">
				<param name="message" type="BMessage*" action="input" />
				<param name="index" type="int32" action="input" />
				<param name="specifier" type="BMessage*" action="input" />
				<param name="form" type="int32" action="input" />
				<param name="property" type="const char*" action="input" />
				<return type="BHandler*" action="output" />
			</method>
			<method name="GetSupportedSuites">
				<param name="data" type="BMessage*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="AddDynamicItem">
				<param name="state" type="BMenu::add_state" action="input" />
				<return type="bool" action="output" />
			</method>
			<method name="DrawBackground">
				<param name="update" type="BRect" action="input" />
			</method>
			<!-- SetTrackingHook not implemented because it takes a function ref -->
			<plain name="get_menu_info">
				<param name="info" type="menu_info*" action="output" />
				<return type="status_t" action="error" success="B_OK" />
			</plain>
			<plain name="set_menu_info">
				<param name="info" type="menu_info*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</plain>
		</functions>
		<constants>
			<constant name="B_ITEMS_IN_ROW" type="int" group="menu_layout">
				<doc>...</doc>
			</constant>
			<constant name="B_ITEMS_IN_COLUMN" type="int" group="menu_layout">
				<doc>...</doc>
			</constant>
			<constant name="B_ITEMS_IN_MATRIX" type="int" group="menu_layout">
				<doc>...</doc>
			</constant>
			<constant name="BMenu::B_INITIAL_ADD" type="int" group="add_state" />
			<constant name="BMenu::B_PROCESSING" type="int" group="add_state" />
			<constant name="BMenu::B_ABORT" type="int" group="add_state" />
		</constants>
	</binding>
	<binding source="menu_info" target="Haiku::menu_info">
		<doc>Exposes the menu_info struct</doc>
		<properties>
			<property name="font_size"             type="float" />
			<property name="f_family"              type="font_family" />
			<property name="f_style"               type="font_style" />
			<property name="background_color"      type="rgb_color" />
			<property name="separator"             type="int32" />
			<property name="click_to_open"         type="bool" />
			<property name="triggers_always_shown" type="bool" />
		</properties>
		<functions>
			<constructor />
			<destructor />
		</functions>
	</binding>
</bindings>
