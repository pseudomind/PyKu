<bindings name="Haiku::Alert">
	<doc>Exposes the Alert object</doc>
	<binding source="BAlert" source-inherits="BWindow" target="Haiku::Alert" target-inherits="Haiku::Window">
		<doc>Exposes the Alert object</doc>
		<functions>
			<constructor>
				<doc>Creates an Alert.</doc>
				<param name="title" type="const char*" action="input">
					<doc>The title. It will not appear on screen, but will appear in the name of the thread.</doc>
				</param>
				<param name="text" type="const char*" action="input">
					<doc>The text to be displayed.</doc>
				</param>
				<param name="button0Label" type="const char*" action="input">
					<doc>Text for the first button.</doc>
				</param>
				<param name="button1Label" type="const char*" action="input" default="NULL">
					<doc>Text for the second button.</doc>
				</param>
				<param name="button2Label" type="const char*" action="input" default="NULL">
					<doc>Text for the third button.</doc>
				</param>
				<param name="widthStyle" type="button_width" action="input" default="B_WIDTH_AS_USUAL">
					<doc>A button width constant.</doc>
				</param>
				<param name="type" type="alert_type" action="input" default="B_INFO_ALERT">
					<doc>An alert type constant; indicates the icon to be displayed.</doc>
				</param>
			</constructor>
			<constructor overload-name="WithSpacing">
				<param name="title" type="const char*" action="input">
					<doc>The title. It will not appear on screen, but will appear in the name of the thread.</doc>
				</param>
				<param name="text" type="const char*" action="input">
					<doc>The text to be displayed.</doc>
				</param>
				<param name="button0Label" type="const char*" action="input">
					<doc>Text for the first button.</doc>
				</param>
				<param name="button1Label" type="const char*" action="input">
					<doc>Text for the second button.</doc>
				</param>
				<param name="button2Label" type="const char*" action="input">
					<doc>Text for the third button.</doc>
				</param>
				<param name="widthStyle" type="button_width" action="input">
					<doc>A button width constant.</doc>
				</param>
				<param name="spacing" type="button_spacing" action="input">
					<doc>A button spacing constant.</doc>
				</param>
				<param name="type" type="alert_type" action="input" default="B_INFO_ALERT">
					<doc>An alert type constant; indicates the icon to be displayed.</doc>
				</param>
			</constructor>
			<constructor overload-name="FromArchive">
				<param name="archive" type="BMessage*" action="input" />
			</constructor>
			<destructor />
			<method name="Instantiate">
				<doc>Instantiate [b]must[/b] return a [name]Haiku::Archivable[/name]</doc>
				<param name="data" type="BMessage*" action="input" />
				<return type="BArchivable*" action="output" />
			</method>
			<method name="Archive">
				<param name="data" type="BMessage*" action="output" />
				<param name="deep" type="bool" default="true" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="SetShortcut">
				<doc>Assigns a shortcut character to the button at [code]index[/code].</doc>
				<param name="index" type="int32" action="input" />
				<param name="shortcut" type="char" action="input" />
			</method>
			<method name="Shortcut">
				<doc>Returns the shortcut character assigned to the button at [code]index[/code].</doc>
				<param name="index" type="int32" action="input" />
				<return type="char" />
			</method>
			<method name="Go">
				<doc>Displays the Alert and returns the 0-based index of the selected button.</doc>
				<return type="int32" />
			</method>
			<method name="Go" overload-name="AsynchronousGo">
				<doc>Displays the Alert and returns immediately.</doc>
				<param name="invoker" type="BInvoker*" action="input">
					<doc>An Invoker to which a message will be sent when a button is selected. The 0-based index of the selected button will be in the int32 "which" field of the message.</doc>
				</param>
				<return type="status_t" action="error" success="B_OK" />
			</method>
<!-- Events not yet implemented for this object
			<event name="MessageReceived">
				<doc>Called when the app receives a message. Determine whether the handle a message by looking at its [code]what[/code] property. Pass unhandled messages to [code][name]Haiku::Window[/name][/code]'s version.</doc>
				<param name="message" type="BMessage*" action="input" must-not-delete="true" />
				<return type="void" />
			</event>
			<event name="FrameResized">
				<param name="width" type="float" action="input" />
				<param name="height" type="float" action="input" />
				<return type="void" />
			</event>
-->
			<method name="ButtonAt">
				<doc>Returns the given button.</doc>
				<param name="index" type="uint32" action="input">
					<doc>0-based index.</doc>
				</param>
				<return type="BButton*" action="output" must-not-delete="true" />
			</method>
			<method name="TextView">
				<doc>Returns the TextView object for the Alert's text.</doc>
				<return type="BTextView*" action="output" must-not-delete="true" />
			</method>
			<method name="ResolveSpecifier">
				<param name="message" type="BMessage*" action="input" />
				<param name="index" type="int32" action="input" />
				<param name="specifier" type="BMessage*" action="input" />
				<param name="form" type="int32" action="input" />
				<param name="property" type="const char*" action="input" />
				<return type="BHandler*" action="output" />
			</method>
			<method name="GetSupportedSuites">
				<param name="data" type="BMessage*" action="input" />
				<return type="status_t" action="error" success="B_OK" />
			</method>
			<method name="DispatchMessage">
				<param name="message" type="BMessage*" action="input" />
				<param name="handler" type="BHandler*" action="input" />
			</method>
			<method name="Quit">
				<doc>Ends the Alerts's message loop.</doc>
				<return type="void" />
			</method>
<!-- Events not yet implemented for this object
			<event name="QuitRequested">
				<return type="bool" />
			</event>
-->
			<method name="AlertPosition">
				<doc>Computes the frame given the width and height and returns the upper left Point.</doc>
				<param name="width" type="float" action="input" />
				<param name="height" type="float" action="input" />
				<return type="BPoint" action="output" />
			</method>
		</functions>
		<constants>
<!-- alert type -->
			<constant name="B_EMPTY_ALERT" type="int" group="alert_type">
				<doc>No icon</doc>
			</constant>
			<constant name="B_INFO_ALERT" type="int" group="alert_type">
				<doc>Info icon</doc>
			</constant>
			<constant name="B_IDEA_ALERT" type="int" group="alert_type">
				<doc>Idea icon</doc>
			</constant>
			<constant name="B_WARNING_ALERT" type="int" group="alert_type">
				<doc>Warning icon</doc>
			</constant>
			<constant name="B_STOP_ALERT" type="int" group="alert_type">
				<doc>Stop icon</doc>
			</constant>
<!-- button_spacing -->
			<constant name="B_EVEN_SPACING" type="int" group="button_spacing">
				<doc>Buttons are evenly spaced</doc>
			</constant>
			<constant name="B_OFFSET_SPACING" type="int" group="button_spacing">
				<doc>Leftmost button is offset</doc>
			</constant>
		</constants>
	</binding>
</bindings>
